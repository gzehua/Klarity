name: Build dependencies

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    strategy:
      matrix:
        arch: [x64, x86]

    env:
      BUILD_DIR: ${{ github.workspace }}\build\${{ matrix.arch }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install dependencies (Chocolatey)
        run: choco install -y ninja cmake yasm nasm git 7zip

      - name: Set up MSVC environment
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.arch }}

      - name: Build PortAudio
        run: |
          git clone https://github.com/PortAudio/portaudio.git
          cd portaudio
          git checkout v19.7.0
          powershell -Command "(Get-Content CMakeLists.txt) -replace 'CMAKE_MINIMUM_REQUIRED.*', 'cmake_minimum_required(VERSION 3.5)' | Set-Content CMakeLists.txt"
          cmake -B build -G 'Ninja' -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON -DCMAKE_RUNTIME_OUTPUT_DIRECTORY=build/out -DCMAKE_LIBRARY_OUTPUT_DIRECTORY=build/out
          cmake --build build
          mkdir -p ${{env.BUILD_DIR}}\bin\portaudio
          mkdir -p ${{env.BUILD_DIR}}\lib\portaudio
          mkdir -p ${{env.BUILD_DIR}}\include\portaudio
          copy build\out\portaudio.dll ${{env.BUILD_DIR}}\bin\portaudio\
          copy build\out\portaudio.lib ${{env.BUILD_DIR}}\lib\portaudio\
          xcopy /E /I /Y include\ ${{env.BUILD_DIR}}\include\portaudio\

      - name: Build FFmpeg
        shell: bash
        run: |
          mkdir -p ffmpeg_build
          cd ffmpeg_build
          curl -LO https://ffmpeg.org/releases/ffmpeg-6.1.tar.bz2
          tar -xjf ffmpeg-6.1.tar.bz2
          cd ffmpeg-6.1
          ./configure \
            --toolchain=msvc \
            --target-os=win64 \
            --arch=${{ matrix.arch == 'x64' && 'x86_64' || 'x86' }} \
            --enable-shared \
            --disable-static \
            --enable-hwaccels \
            --enable-cuda \
            --enable-cuvid \
            --enable-d3d11va \
            --enable-dxva2 \
            --enable-libmfx \
            --disable-programs
          make -j$(nproc)
          mkdir -p ${{env.BUILD_DIR}}/bin/ffmpeg
          mkdir -p ${{env.BUILD_DIR}}/lib/ffmpeg
          mkdir -p ${{env.BUILD_DIR}}/include/ffmpeg
          cp *.dll ${{env.BUILD_DIR}}/bin/ffmpeg/
          cp *.lib ${{env.BUILD_DIR}}/lib/ffmpeg/
          cp -R ./include/* ${{env.BUILD_DIR}}/include/ffmpeg/

      - name: Build Klarity
        run: |
          cmake -B klarity_build -G "Ninja" -DCMAKE_BUILD_TYPE=Release -DCMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE="${{env.BUILD_DIR}}\bin\klarity"
          cmake --build klarity_build --config Release
          mkdir -p ${{env.BUILD_DIR}}\lib\klarity
          copy klarity_build\Release\klarity.lib ${{env.BUILD_DIR}}\lib\klarity\

      - name: Archive binaries
        run: |
          7z a klarity-${{ matrix.arch }}.zip ${{env.BUILD_DIR}}\bin\* ${{env.BUILD_DIR}}\lib\* ${{env.BUILD_DIR}}\include\*

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: klarity-artifacts-${{ matrix.arch }}
          path: klarity-${{ matrix.arch }}.zip
