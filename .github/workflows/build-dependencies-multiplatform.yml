name: Build dependencies multiplatform

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        include:
          - os: windows-latest
            platform: win64
            triplet: x64-windows
            shell: powershell
            ffmpeg_features: "core,avcodec,avdevice,avfilter,avformat,swresample,swscale,amf,qsv,opencl,dav1d"
          - os: ubuntu-latest
            platform: linux
            triplet: x64-linux
            shell: bash
            ffmpeg_features: "core,avcodec,avdevice,avfilter,avformat,swresample,swscale,opencl,dav1d"
          - os: macos-latest
            platform: macos
            triplet: x64-osx
            shell: bash
            ffmpeg_features: "core,avcodec,avdevice,avfilter,avformat,swresample,swscale,opencl"

    env:
      VCPKG_DIR: ${{ github.workspace }}/vcpkg
      BUILD_DIR: ${{ github.workspace }}/build-${{ matrix.platform }}
      BIN_FOLDER: ${{ github.workspace }}/bin-${{ matrix.platform }}
      JARS_FOLDER: ${{ github.workspace }}/jars/${{ matrix.platform }}
      RESOURCES_BIN: ${{ github.workspace }}/core/src/main/resources/bin/${{ matrix.platform }}
      SOURCE_DIR: ${{ github.workspace }}/core/src/main/cpp

    steps:
      - name: Checkout project
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Install system dependencies
        run: |
          case "${{ matrix.os }}" in
            windows-latest)
              choco install cmake ninja git yasm pkgconfiglite -y --no-progress
              ;;
            ubuntu-latest)
              sudo apt-get update && sudo apt-get install -y cmake ninja-build git pkg-config ocl-icd-opencl-dev nasm
              ;;
            macos-latest)
              brew install cmake ninja pkg-config nasm
              ;;
          esac
        shell: bash

      - name: Clone and bootstrap vcpkg
        run: |
          git clone https://github.com/Microsoft/vcpkg.git "$VCPKG_DIR"
          cd "$VCPKG_DIR"
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            powershell -Command ".\\bootstrap-vcpkg.bat -disableMetrics"
          else
            ./bootstrap-vcpkg.sh -disableMetrics
          fi
        shell: bash

      - name: Install FFmpeg
        run: |
          cd "$VCPKG_DIR"
          ${{ matrix.shell == 'powershell' && 'powershell -Command' || '' }} \
          "vcpkg install ffmpeg[${{ matrix.ffmpeg_features }}]:${{ matrix.triplet }} --recurse"
        shell: ${{ matrix.shell }}

      - name: Install PortAudio
        run: |
          cd "$VCPKG_DIR"
          ${{ matrix.shell == 'powershell' && 'powershell -Command' || '' }} \
          "vcpkg install portaudio:${{ matrix.triplet }}"
        shell: ${{ matrix.shell }}

      - name: Copy dependency binaries
        run: |
          mkdir -p "$BIN_FOLDER"
          case "${{ matrix.os }}" in
            windows-latest)
              cp "$VCPKG_DIR/installed/${{ matrix.triplet }}/bin/"*.dll "$BIN_FOLDER" || true
              ;;
            ubuntu-latest)
              cp "$VCPKG_DIR/installed/${{ matrix.triplet }}/lib/"*.so* "$BIN_FOLDER" || true
              ;;
            macos-latest)
              cp "$VCPKG_DIR/installed/${{ matrix.triplet }}/lib/"*.dylib "$BIN_FOLDER" || true
              ;;
          esac
        shell: bash

      - name: Build Klarity native code
        run: |
          mkdir -p "$BUILD_DIR"
          cd "$BUILD_DIR"

          cmake "$SOURCE_DIR" \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_TOOLCHAIN_FILE="$VCPKG_DIR/scripts/buildsystems/vcpkg.cmake" \
            -DCMAKE_CXX_STANDARD=17 \
            $([[ "${{ matrix.platform }}" == "win64" ]] && echo "-DWITH_AMF=ON -DWITH_QSV=ON") \
            -DCMAKE_CXX_FLAGS="-pthread" \
            -DCMAKE_EXE_LINKER_FLAGS="-pthread"

          cmake --build . --config Release --parallel
        shell: bash

      - name: Package native libraries
        run: |
          mkdir -p "$RESOURCES_BIN"
          cp "$BUILD_DIR"/*.{so,dll,dylib} "$RESOURCES_BIN" 2>/dev/null || true
          cp "$BIN_FOLDER"/*.{so*,dll,dylib} "$RESOURCES_BIN" 2>/dev/null || true
        shell: bash

      - name: Build Java modules
        run: |
          mvn clean package -DskipTests -pl core,compose,example -am \
            -Dnative.platform=${{ matrix.platform }} \
            -Djavacpp.platform=${{ matrix.platform }}

          mkdir -p "${{ env.JARS_FOLDER }}"
          for module in core compose example; do
            cp $module/target/*-${{ matrix.platform }}.jar "${{ env.JARS_FOLDER }}" || \
            cp $module/target/*.jar "${{ env.JARS_FOLDER }}" || true
          done
        shell: bash

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: klarity-${{ matrix.platform }}-build
          path: |
            ${{ env.JARS_FOLDER }}
            ${{ env.RESOURCES_BIN }}
            ${{ env.BIN_FOLDER }}
