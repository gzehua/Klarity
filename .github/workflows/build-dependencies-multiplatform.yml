name: Build dependencies multiplatform

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ windows-latest, ubuntu-latest, macos-latest ]
        include:
          - os: windows-latest
            platform: win64
            triplet: x64-windows
            ffmpeg_features: "core,avcodec,avdevice,avfilter,avformat,swresample,swscale,amf,qsv,opencl,dav1d"
          - os: ubuntu-latest
            platform: linux
            triplet: x64-linux
            ffmpeg_features: "core,avcodec,avdevice,avfilter,avformat,swresample,swscale,opencl,dav1d"
          - os: macos-latest
            platform: macos
            triplet: x64-osx
            ffmpeg_features: "core,avcodec,avdevice,avfilter,avformat,swresample,swscale,opencl"

    env:
      VCPKG_DIR: ${{ github.workspace }}\vcpkg
      BUILD_DIR: ${{ github.workspace }}\build-${{ matrix.platform }}
      BIN_FOLDER: ${{ github.workspace }}\bin-${{ matrix.platform }}
      JARS_FOLDER: ${{ github.workspace }}\jars\${{ matrix.platform }}
      RESOURCES_BIN: ${{ github.workspace }}\core\src\main\resources\bin\${{ matrix.platform }}
      SOURCE_DIR: ${{ github.workspace }}\core\src\main\cpp

    steps:
      - name: Checkout project
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Install system dependencies
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            choco install cmake -y --no-progress
            choco install ninja -y --no-progress
            choco install git -y --no-progress --ignore-dependencies
            choco install yasm -y --no-progress
            choco install pkgconfiglite -y --no-progress
          elif [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            sudo apt-get update && sudo apt-get install -y cmake ninja-build git pkg-config ocl-icd-opencl-dev nasm
          else
            brew install cmake ninja pkg-config nasm
          fi
        shell: bash

      - name: Clone and bootstrap vcpkg
        run: |
          git clone https://github.com/Microsoft/vcpkg.git "$env:VCPKG_DIR"
          cd "$env:VCPKG_DIR"
          .\bootstrap-vcpkg.bat -disableMetrics
        shell: powershell

      - name: Install FFmpeg with validated features
        run: |
          cd "$env:VCPKG_DIR"
          .\vcpkg install ffmpeg[${{ matrix.ffmpeg_features }}]:${{ matrix.triplet }} --recurse
          
          if ("${{ matrix.os }}" -eq "windows-latest") {
            Copy-Item -Path "installed\${{ matrix.triplet }}\bin\*.dll" -Destination "$env:BIN_FOLDER" -Force
          }
        shell: powershell

      - name: Install PortAudio
        run: |
          cd "$env:VCPKG_DIR"
          .\vcpkg install portaudio:${{ matrix.triplet }}
          Copy-Item -Path "installed\${{ matrix.triplet }}\bin\portaudio.dll" -Destination "$env:BIN_FOLDER" -Force
        shell: powershell

      - name: Build Klarity native code
        run: |
          New-Item -ItemType Directory -Path "$env:BUILD_DIR" -Force
          cd "$env:BUILD_DIR"
          
          $cmakeArgs = @(
            "$env:SOURCE_DIR",
            "-DCMAKE_BUILD_TYPE=Release",
            "-DCMAKE_TOOLCHAIN_FILE=$env:VCPKG_DIR\scripts\buildsystems\vcpkg.cmake"
          )
          
          if ("${{ matrix.platform }}" -eq "win64") {
            $cmakeArgs += "-DWITH_AMF=ON", "-DWITH_QSV=ON"
          }
          
          cmake @cmakeArgs
          cmake --build . --config Release --parallel
        shell: powershell

      - name: Package native libraries
        run: |
          New-Item -ItemType Directory -Path "$env:RESOURCES_BIN" -Force
          Copy-Item -Path "$env:BUILD_DIR\*.dll" -Destination "$env:RESOURCES_BIN" -Force
          Copy-Item -Path "$env:BIN_FOLDER\*.dll" -Destination "$env:RESOURCES_BIN" -Force
        shell: powershell

      - name: Build Java modules
        run: |
          cd "$env:GITHUB_WORKSPACE"
          mvn clean package -DskipTests -pl core,compose,example -am `
            -Dnative.platform=${{ matrix.platform }} `
            -Djavacpp.platform=${{ matrix.platform }}
          
          New-Item -ItemType Directory -Path "$env:JARS_FOLDER" -Force
          foreach ($module in @("core", "compose", "example")) {
            $jar = Get-ChildItem "$module\target\*-${{ matrix.platform }}.jar" -ErrorAction SilentlyContinue
            if ($null -eq $jar) {
              $jar = Get-ChildItem "$module\target\*.jar" | Select-Object -First 1
            }
            if ($null -ne $jar) {
              Copy-Item -Path $jar.FullName -Destination "$env:JARS_FOLDER" -Force
            }
          }
        shell: powershell

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: klarity-${{ matrix.platform }}-build
          path: |
            ${{ env.JARS_FOLDER }}
            ${{ env.RESOURCES_BIN }}
            ${{ env.BIN_FOLDER }}