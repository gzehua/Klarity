name: Build dependencies

on:
  workflow_dispatch:

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
    env:
      FFMPEG_VERSION: "7.1.1"
      PORTAUDIO_VERSION: "pa_stable_v190700_20210406"
      BIN_DIR: ${{ github.workspace }}/output/${{ matrix.os }}/bin
      INCLUDE_DIR: ${{ github.workspace }}/output/${{ matrix.os }}/include
      JAR_DIR: ${{ github.workspace }}/output/${{ matrix.os }}/jars

    steps:
      - uses: actions/checkout@v4

      - name: Install CMake, JDK, Gradle
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17

      - name: Set up Gradle
        uses: gradle/gradle-build-action@v3

      - name: Install dependencies (Linux only)
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install -y yasm libasound2-dev pkg-config unzip

      - name: Install dependencies (macOS only)
        if: runner.os == 'macOS'
        run: brew install yasm portaudio pkg-config

      - name: Install dependencies (Windows only)
        if: runner.os == 'Windows'
        run: choco install yasm --no-progress

      - name: Download and build FFmpeg
        run: |
          mkdir -p deps && cd deps
          curl -L -o ffmpeg.tar.gz https://github.com/FFmpeg/FFmpeg/archive/refs/tags/n${{ env.FFMPEG_VERSION }}.tar.gz
          tar -xf ffmpeg.tar.gz
          cd FFmpeg-${{ env.FFMPEG_VERSION }}
          ./configure --enable-shared --disable-static --prefix="${{ env.BIN_DIR }}/ffmpeg" --extra-cflags="-fPIC"
          make -j$(nproc || sysctl -n hw.logicalcpu)
          make install
        shell: bash

      - name: Download and build PortAudio
        run: |
          mkdir -p deps && cd deps
          curl -L -o portaudio.zip https://app.assembla.com/spaces/portaudio/git/source/${{ env.PORTAUDIO_VERSION }}/?format=zip
          unzip portaudio.zip -d portaudio-src
          cd portaudio-src/*
          cmake -B build -DCMAKE_BUILD_TYPE=Release -DPA_BUILD_SHARED=ON -DCMAKE_INSTALL_PREFIX="${{ env.BIN_DIR }}/portaudio"
          cmake --build build --target install --config Release
        shell: bash

      - name: Build Native Library with CMake
        run: |
          cmake -S core/src/main/cpp -B build \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX="${{ env.BIN_DIR }}/klarity" \
            -DCMAKE_LIBRARY_OUTPUT_DIRECTORY="${{ env.BIN_DIR }}/klarity" \
            -DCMAKE_PREFIX_PATH="${{ env.BIN_DIR }}/ffmpeg;${{ env.BIN_DIR }}/portaudio" \
            -DCMAKE_LIBRARY_PATH="${{ env.BIN_DIR }}/ffmpeg/lib;${{ env.BIN_DIR }}/portaudio/lib" \
            -DCMAKE_BUILD_RPATH="${{ env.BIN_DIR }}/ffmpeg/lib;${{ env.BIN_DIR }}/portaudio/lib"
          cmake --build build --target install --config Release
        shell: bash

      - name: Copy headers
        run: |
          mkdir -p ${{ env.INCLUDE_DIR }}/ffmpeg
          cp -r deps/FFmpeg-${{ env.FFMPEG_VERSION }}/include/* ${{ env.INCLUDE_DIR }}/ffmpeg/
          mkdir -p ${{ env.INCLUDE_DIR }}/portaudio
          cp -r deps/portaudio-src/*/include/* ${{ env.INCLUDE_DIR }}/portaudio/
        shell: bash

      - name: Prepare shared libs for JAR resources
        run: |
          os=$(echo "${{ runner.os }}" | tr '[:upper:]' '[:lower:]')
          mkdir -p core/src/main/resources/bin/$os
          cp ${{ env.BIN_DIR }}/ffmpeg/lib/* core/src/main/resources/bin/$os/
          cp ${{ env.BIN_DIR }}/portaudio/lib/* core/src/main/resources/bin/$os/
          cp ${{ env.BIN_DIR }}/klarity/* core/src/main/resources/bin/$os/
        shell: bash

      - name: Build JARs
        run: |
          ./gradlew :compose:jar :example:jar :core:jar
          mkdir -p ${{ env.JAR_DIR }}
          cp compose/build/libs/*.jar ${{ env.JAR_DIR }}/compose.jar
          cp example/build/libs/*.jar ${{ env.JAR_DIR }}/example.jar
          cp core/build/libs/*.jar ${{ env.JAR_DIR }}/core.jar
        shell: bash

      - name: Archive Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: klarity-${{ matrix.os }}
          path: output/${{ matrix.os }}