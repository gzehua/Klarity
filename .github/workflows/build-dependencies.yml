name: Build dependencies

on:
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        os: [ windows-latest, macos-latest, ubuntu-latest ]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up environment
        id: setup
        shell: bash
        run: |
          echo "FFMPEG_VERSION=6.1.1" >> $GITHUB_ENV
          echo "PORTAUDIO_VERSION=19.7.0" >> $GITHUB_ENV
          echo "BUILD_DIR=build" >> $GITHUB_ENV
          echo "INSTALL_DIR=install" >> $GITHUB_ENV
          
          if [ "$RUNNER_OS" == "Windows" ]; then
            echo "CMAKE_GENERATOR=\"Visual Studio 17 2022\"" >> $GITHUB_ENV
            echo "ARCH=x64" >> $GITHUB_ENV
            echo "EXT=dll" >> $GITHUB_ENV
            echo "LIBEXT=lib" >> $GITHUB_ENV
          elif [ "$RUNNER_OS" == "macOS" ]; then
            echo "CMAKE_GENERATOR=\"Unix Makefiles\"" >> $GITHUB_ENV
            echo "EXT=dylib" >> $GITHUB_ENV
            echo "LIBEXT=dylib" >> $GITHUB_ENV
            echo "MACOSX_DEPLOYMENT_TARGET=11.0" >> $GITHUB_ENV
          else
            echo "CMAKE_GENERATOR=\"Unix Makefiles\"" >> $GITHUB_ENV
            echo "EXT=so" >> $GITHUB_ENV
            echo "LIBEXT=so" >> $GITHUB_ENV
          fi

      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            cmake \
            ninja-build \
            pkg-config \
            libtool \
            autoconf \
            automake \
            yasm \
            nasm \
            libjpeg-dev \
            libpng-dev \
            libtiff-dev \
            libavcodec-dev \
            libavformat-dev \
            libswscale-dev \
            libv4l-dev \
            libxvidcore-dev \
            libx264-dev \
            libopenal-dev \
            libsdl2-dev \
            libva-dev \
            libvdpau-dev \
            libvulkan-dev \
            libdrm-dev \
            libx11-dev \
            libxcb1-dev \
            libxcb-shm0-dev \
            libxcb-xfixes0-dev \
            libpulse-dev \
            libasound2-dev \
            openjdk-17-jdk

      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        shell: bash
        run: |
          brew update
          brew install \
            cmake \
            pkg-config \
            nasm \
            yasm \
            libtool \
            automake \
            openjdk@17
          brew link openjdk@17 --force

      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          choco install -y cmake ninja pkgconfiglite nasm yasm openjdk17

      - name: Build PortAudio
        shell: bash
        run: |
          git clone https://github.com/PortAudio/portaudio.git
          cd portaudio
          git checkout v${{ env.PORTAUDIO_VERSION }}
          
          if [ "$RUNNER_OS" == "Windows" ]; then
            cmake -B ${{ env.BUILD_DIR }} -G "${{ env.CMAKE_GENERATOR }}" -A ${{ env.ARCH }} \
              -DCMAKE_INSTALL_PREFIX=../${{ env.INSTALL_DIR }}
            cmake --build ${{ env.BUILD_DIR }} --config Release --target install
          elif [ "$RUNNER_OS" == "macOS" ]; then
            cmake -B ${{ env.BUILD_DIR }} -G "${{ env.CMAKE_GENERATOR }}" \
              -DCMAKE_INSTALL_PREFIX=../${{ env.INSTALL_DIR }} \
              -DCMAKE_OSX_DEPLOYMENT_TARGET=${{ env.MACOSX_DEPLOYMENT_TARGET }} \
              -DPA_USE_COREAUDIO=ON \
              -DPA_BUILD_SHARED=ON \
              -Wno-dev
            cmake --build ${{ env.BUILD_DIR }} --config Release --target install
          else
            ./configure --prefix=$GITHUB_WORKSPACE/${{ env.INSTALL_DIR }} --enable-shared CFLAGS="-Wno-error"
            make -j$(nproc)
            make install
          fi

      - name: Build FFmpeg
        shell: bash
        run: |
          git clone https://git.ffmpeg.org/ffmpeg.git ffmpeg
          cd ffmpeg
          git checkout n${{ env.FFMPEG_VERSION }}
          
          EXTRA_FLAGS=""
          if [ "$RUNNER_OS" == "Linux" ]; then
            EXTRA_FLAGS="--enable-vaapi --enable-vdpau --enable-vulkan --enable-opencl --enable-cuda --enable-cuvid --enable-nvenc --enable-libdrm"
          elif [ "$RUNNER_OS" == "macOS" ]; then
            EXTRA_FLAGS="--enable-videotoolbox --enable-opencl --enable-metal"
          elif [ "$RUNNER_OS" == "Windows" ]; then
            EXTRA_FLAGS="--enable-d3d11va --enable-dxva2 --enable-nvenc --enable-cuda --enable-cuvid"
          fi
          
          ./configure \
            --prefix=$GITHUB_WORKSPACE/${{ env.INSTALL_DIR }} \
            --enable-shared \
            --disable-static \
            --enable-gpl \
            --enable-version3 \
            --enable-nonfree \
            --enable-libx264 \
            --enable-libx265 \
            --enable-libvpx \
            --enable-libmp3lame \
            --enable-libopus \
            --enable-libvorbis \
            --enable-libass \
            --enable-openssl \
            --enable-libfreetype \
            --enable-libfontconfig \
            $EXTRA_FLAGS
          
          make -j$(nproc)
          make install

      - name: Build Klarity
        shell: bash
        run: |
          mkdir -p $GITHUB_WORKSPACE/${{ env.INSTALL_DIR }}/bin
          mkdir -p $GITHUB_WORKSPACE/${{ env.INSTALL_DIR }}/lib
          mkdir -p $GITHUB_WORKSPACE/${{ env.INSTALL_DIR }}/include
          
          cp -r $GITHUB_WORKSPACE/${{ env.INSTALL_DIR }}/include/* $GITHUB_WORKSPACE/${{ env.INSTALL_DIR }}/include/
          
          mkdir build
          cd build
          
          if [ "$RUNNER_OS" == "Windows" ]; then
            cmake .. -G "${{ env.CMAKE_GENERATOR }}" -A ${{ env.ARCH }} \
              -DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/${{ env.INSTALL_DIR }} \
              -DCMAKE_BUILD_TYPE=Release
            cmake --build . --config Release --target install
          elif [ "$RUNNER_OS" == "macOS" ]; then
            cmake .. -G "${{ env.CMAKE_GENERATOR }}" \
              -DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/${{ env.INSTALL_DIR }} \
              -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_OSX_DEPLOYMENT_TARGET=${{ env.MACOSX_DEPLOYMENT_TARGET }}
            cmake --build . --config Release --target install -- -j$(nproc)
          else
            cmake .. -G "${{ env.CMAKE_GENERATOR }}" \
              -DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/${{ env.INSTALL_DIR }} \
              -DCMAKE_BUILD_TYPE=Release
            cmake --build . --config Release --target install -- -j$(nproc)
          fi

      - name: Package artifacts
        shell: bash
        run: |
          mkdir -p package/bin
          mkdir -p package/lib
          mkdir -p package/include
          
          cp $GITHUB_WORKSPACE/${{ env.INSTALL_DIR }}/bin/* package/bin/ 2>/dev/null || :
          cp $GITHUB_WORKSPACE/${{ env.INSTALL_DIR }}/lib/*.${{ env.EXT }} package/bin/ 2>/dev/null || :
          cp $GITHUB_WORKSPACE/${{ env.INSTALL_DIR }}/lib/*.${{ env.LIBEXT }} package/lib/ 2>/dev/null || :
          
          cp -r $GITHUB_WORKSPACE/${{ env.INSTALL_DIR }}/include/* package/include/ 2>/dev/null || :
          
          if [ "$RUNNER_OS" == "Windows" ]; then
            7z a -r klarity-$RUNNER_OS.zip package
          else
            zip -r klarity-$RUNNER_OS.zip package
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: klarity-${{ runner.os }}
          path: klarity-$RUNNER_OS.zip