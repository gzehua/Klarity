name: Build dependencies

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            triplet: x64-windows
            binary_ext: .dll
          - os: ubuntu-latest
            triplet: x64-linux
            binary_ext: .so
          - os: macos-latest
            triplet: x64-osx
            binary_ext: .dylib

    env:
      VCPKG_PACKAGES=${{ github.workspace }}/vcpkg/packages
      FFMPEG_INCLUDE=${{ env.VCPKG_PACKAGES }}/ffmpeg_${{ matrix.triplet }}/include
      PORTAUDIO_INCLUDE=${{ env.VCPKG_PACKAGES }}/portaudio_${{ matrix.triplet }}/include
      FFMPEG_BIN=${{ env.VCPKG_PACKAGES }}/ffmpeg_${{ matrix.triplet }}/bin
      PORTAUDIO_BIN=${{ env.VCPKG_PACKAGES }}/portaudio_${{ matrix.triplet }}/bin

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      #      - name: Install dependencies (Linux only)
      #        if: runner.os == 'Linux'
      #        run: |
      #          sudo apt-get update
      #          sudo apt-get install -y unzip curl pkg-config cmake ninja-build nasm
      #
      #      - name: Install dependencies (macOS only)
      #        if: runner.os == 'macOS'
      #        run: brew install cmake ninja nasm pkg-config

      - name: Set up vcpkg
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgJsonGlob: 'core/src/main/vcpkg.json'

      - name: Configure CMake
        run:
          cmake -S core/src/main/cpp -B build /
          -DFFMPEG_INCLUDE=${{ env.FFMPEG_INCLUDE }} /
          -DPORTAUDIO_INCLUDE=${{ env.PORTAUDIO_INCLUDE }}${{ github.workspace }}/vcpkg/packages/portaudio_${{ matrix.triplet }}/include /
          -DFFMPEG_BIN=${{ github.workspace }}/vcpkg/packages/ffmpeg_${{ matrix.triplet }}/bin /
          -DPORTAUDIO_BIN=${{ github.workspace }}/vcpkg/packages/portaudio_${{ matrix.triplet }}/bin /
          -DCMAKE_BUILD_TYPE=Release /

      - name: Build native library
        run: cmake --build build --config Release

      - name: Prepare resources
        shell: bash
        run: |
          rm -rf core/src/main/resources/bin
          mkdir -p core/src/main/resources/bin
          cp build/*klarity${{ matrix.binary_ext }} core/src/main/resources/bin/ || true
          for lib in avutil swresample swscale avcodec avformat avfilter avdevice portaudio; do
            cp ${{ github.workspace }}/vcpkg/installed/${{ matrix.triplet }}/bin/*${lib}*${{ matrix.binary_ext }} core/src/main/resources/bin/ || true
          done

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17

      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Build JARs
        run: |
          ./gradlew :core:shadowJar
          ./gradlew :compose:shadowJar
          ./gradlew :example:shadowJar

      - name: Clean up resources
        run: |
          rm -rf core/src/main/resources/bin

      - name: Copy JARs
        run: |
          mkdir -p artifacts/${{ matrix.os }}
          cp core/build/libs/*.jar artifacts/${{ matrix.os }}/core.jar
          cp compose/build/libs/*.jar artifacts/${{ matrix.os }}/compose.jar
          cp example/build/libs/*.jar artifacts/${{ matrix.os }}/example.jar

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: klarity-${{ matrix.os }}
          path: artifacts/${{ matrix.os }}