name: Build dependencies

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            triplet: x64-linux
            os_folder: linux
          - os: macos-latest
            triplet: x64-osx
            os_folder: macos
          - os: windows-latest
            triplet: x64-windows
            os_folder: windows

    env:
      OS_FOLDER: ${{ matrix.os_folder }}
      VCPKG_TRIPLET: ${{ matrix.triplet }}
      VCPKG_ROOT: ${{ github.workspace }}/vcpkg
      TOOLCHAIN_FILE: ${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17

      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Set up vcpkg
        uses: lukka/run-vcpkg@v11.5

      - name: Set up CMake
        uses: lukka/get-cmake@latest

      - name: Run CMake
        uses: lukka/run-cmake@v10.8
        with:
          cmakeListsTxtPath: ${{ github.workspace }}/core/src/main/cpp/CMakeLists.txt
          configurePreset: 'ninja-multi-vcpkg'
          configurePresetAdditionalArgs: "[
            '-DBUILD_SHARED_LIBS=ON',
            '-DCMAKE_BUILD_TYPE=Release',
            '-DVCPKG_TARGET_TRIPLET=${{ env.VCPKG_TRIPLET }}',
            '-DCMAKE_TOOLCHAIN_FILE=${{ env.TOOLCHAIN_FILE }}'
          ]"

#      - name: Configure CMake
#        run: |
#          cmake -S . -B build \
#          -DCMAKE_TOOLCHAIN_FILE=${{ env.TOOLCHAIN_FILE }} \
#          -DVCPKG_TARGET_TRIPLET=${{ env.VCPKG_TRIPLET }} \
#          -DCMAKE_BUILD_TYPE=Release \
#          -DBUILD_SHARED_LIBS=ON
#
#      - name: Build native library
#        run: cmake --build build --config Release
#
#      - name: Copy platform-specific binaries to resources
#        run: |
#          mkdir -p core/src/main/resources/bin/${{ env.OS_FOLDER }}
#
#          cp build/*.{dll,so,dylib} core/src/main/resources/bin/${{ env.OS_FOLDER }}/ 2>/dev/null || true
#          cp ${{ env.VCPKG_ROOT }}/installed/${{ env.VCPKG_TRIPLET }}/bin/*ffmpeg* core/src/main/resources/bin/${{ env.OS_FOLDER }}/ || true
#          cp ${{ env.VCPKG_ROOT }}/installed/${{ env.VCPKG_TRIPLET }}/bin/*portaudio* core/src/main/resources/bin/${{ env.OS_FOLDER }}/ || true
#
#      - name: Build JARs
#        run: |
#          ./gradlew :core:shadowJar
#          ./gradlew :compose:shadowJar
#
#      - name: Copy JARs
#        run: |
#          mkdir -p artifacts/${{ matrix.os }}/jar
#          cp core/build/libs/*.jar artifacts/${{ matrix.os }}/libs/core.jar || true
#          cp compose/build/libs/*.jar artifacts/${{ matrix.os }}/libs/compose.jar || true
#
#      - name: Upload artifacts
#        uses: actions/upload-artifact@v4
#        with:
#          name: klarity-${{ matrix.os }}
#          path: artifacts/${{ matrix.os }}