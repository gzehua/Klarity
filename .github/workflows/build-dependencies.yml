name: Build dependencies

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            triplet: x64-windows
            binary_ext: dll

          - os: macos-latest-arm64
            triplet: arm64-osx
            binary_ext: dylib

          - os: macos-latest
            triplet: x64-osx
            binary_ext: dylib

          - os: ubuntu-latest-arm64
            triplet: arm64-linux
            binary_ext: so

          - os: ubuntu-latest
            triplet: x64-linux
            binary_ext: so

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up nasm
        uses: ilammy/setup-nasm@v1

      - name: Set up vcpkg
        uses: lukka/run-vcpkg@v11
        with:
          doNotCache: 'false'
          vcpkgJsonGlob: '**/core/src/main/cpp/vcpkg.json'

      - name: Configure project (Linux)
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'ubuntu-latest-arm64'
        run: |
          cmake -B core/src/main/cpp/build -S core/src/main/cpp \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_TOOLCHAIN_FILE=${VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake \
          -DVCPKG_TARGET_TRIPLET=${{ matrix.triplet }} \
          -DCMAKE_SHARED_LINKER_FLAGS="-Wl,-Bsymbolic"
        shell: bash

      - name: Configure project (Non-Linux)
        if: matrix.os != 'ubuntu-latest' && matrix.os != 'ubuntu-latest-arm64'
        run: |
          cmake -B core/src/main/cpp/build -S core/src/main/cpp \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_TOOLCHAIN_FILE=${VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake \
          -DVCPKG_TARGET_TRIPLET=${{ matrix.triplet }}
        shell: bash

      - name: Build project
        run: cmake --build core/src/main/cpp/build --config Release --parallel

      - name: Copy binaries
        run: |
          shopt -s nullglob
          mkdir -p core/src/main/resources/bin
          mkdir -p core/src/test/resources/bin
          for f in core/src/main/cpp/build/*${{ matrix.binary_ext }}*; do
            cp "$f" core/src/main/resources/bin/
            cp "$f" core/src/test/resources/bin/
          done
          for f in core/src/main/cpp/build/*klarity*${{ matrix.binary_ext }}*; do
            cp "$f" core/src/main/resources/bin/
          done
        shell: bash

      - name: Make binaries executable
        if: matrix.os != 'windows-latest'
        run: |
          chmod +x core/src/main/resources/bin/*
          chmod +x core/src/test/resources/bin/*

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17.0.15+6

      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Make Gradle wrapper executable
        if: matrix.os != 'windows-latest'
        run: chmod +x gradlew

      - name: Build JARs
        run: |
          ./gradlew :core:build -x test
          ./gradlew :compose:build -x test
          ./gradlew :example:build -x test

      - name: Clean up resources
        run: |
          rm -rf core/src/main/resources/bin
          rm -rf core/src/test/resources/bin

      - name: Copy JARs
        run: |
          mkdir -p artifacts/${{ matrix.os }}
          cp core/build/libs/*.jar artifacts/${{ matrix.os }}
          cp compose/build/libs/*.jar artifacts/${{ matrix.os }}
          cp example/build/libs/*.jar artifacts/${{ matrix.os }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: klarity-${{ matrix.os }}
          path: artifacts/${{ matrix.os }}