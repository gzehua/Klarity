name: Build dependencies

on:
  workflow_dispatch:

jobs:
  compile:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            triplet: x64-windows
            binary_ext: dll

#          - os: macos-latest-arm64
#            triplet: arm64-osx
#            binary_ext: dylib
#
#          - os: macos-latest
#            triplet: x64-osx
#            binary_ext: dylib

          - os: ubuntu-latest-arm64
            triplet: arm64-linux
            binary_ext: so

          - os: ubuntu-latest
            triplet: x64-linux
            binary_ext: so

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up nasm
        uses: ilammy/setup-nasm@v1

      - name: Set up vcpkg
        uses: lukka/run-vcpkg@v11
        with:
          doNotCache: 'false'
          vcpkgJsonGlob: '**/core/src/main/cpp/vcpkg.json'

      - name: Configure project
        run: |
          cmake -B "core/src/main/cpp/build-${{ matrix.triplet }}" -S core/src/main/cpp \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_TOOLCHAIN_FILE=${VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake \
            -DVCPKG_TARGET_TRIPLET=${{ matrix.triplet }} \
            $([ "${{ matrix.triplet }}" == *"linux"* ] && echo "-DCMAKE_SHARED_LINKER_FLAGS=\"-Wl,-Bsymbolic\"")
        shell: bash

      - name: Build project
        run: cmake --build core/src/main/cpp/build-${{ matrix.triplet }} --config Release --parallel

      - name: Upload binaries
        uses: actions/upload-artifact@v4
        with:
          name: bin-${{ matrix.triplet }}
          path: core/src/main/cpp/build-${{ matrix.triplet }}/*.${{ matrix.binary_ext }}

      - name: Clean build directories
        run: rm -rf core/src/main/cpp/build-*

  build-core:
    needs: compile
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - triplet: x64-windows
            binary_ext: dll
            os_suffix: windows-x64

          - triplet: arm64-osx
            binary_ext: dylib
            os_suffix: macos-arm64

          - triplet: x64-osx
            binary_ext: dylib
            os_suffix: macos-x64

          - triplet: arm64-linux
            binary_ext: so
            os_suffix: linux-arm64

          - triplet: x64-linux
            binary_ext: so
            os_suffix: linux-x64

    steps:
      - uses: actions/checkout@v4

      - name: Download binaries
        uses: actions/download-artifact@v4
        with:
          name: bin-${{ matrix.triplet }}
          path: core/src/main/resources/bin

      - name: Make binaries executable
        if: matrix.triplet != 'x64-windows'
        run: chmod +x core/src/main/resources/bin/* || true

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17.0.15+6

      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Make Gradle wrapper executable
        run: chmod +x gradlew

      - name: Build JARs
        run: ./gradlew :core:jar -x test --no-daemon

      - name: Clean up resources
        run: |
          rm -rf core/src/main/resources/bin

      - name: Rename JAR
        run: |
          mv core/build/libs/core.jar core/build/libs/core-${{ matrix.os_suffix }}.jar

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: core
          path: core/build/libs/core-${{ matrix.os_suffix }}.jar

  build-compose:
    needs: compile
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Java & Gradle
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - uses: gradle/actions/setup-gradle@v4

      - name: Build JAR
        run: |
          ./gradlew :compose:jar -x test --no-daemon

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: compose
          path: compose/build/libs/compose.jar