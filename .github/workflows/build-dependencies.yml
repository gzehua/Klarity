name: Build dependencies

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
#          - os: windows-latest
#            triplet: x64-windows
#            binary_ext: .dll
          - os: ubuntu-latest
            triplet: x64-linux
            binary_ext: .so
    #          - os: macos-latest
    #            triplet: arm64-osx
    #            binary_ext: .dylib

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install nasm (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y nasm

      - name: Install nasm (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install nasm

      - name: Set up vcpkg
        uses: lukka/run-vcpkg@v11
        with:
          doNotCache: 'false'
          vcpkgJsonGlob: '**/core/src/main/cpp/vcpkg.json'

      - name: Create build directory
        shell: bash
        run: mkdir -p build

      - name: Cache CMake configuration
        uses: actions/cache@v3
        id: cmake-cache
        with:
          path: |
            build/CMakeCache.txt
            build/CMakeFiles
            build/cmake_install.cmake
            build/Makefile
            build/*.ninja
          key: ${{ runner.os }}-cmake-${{ matrix.triplet }}-${{ hashFiles('core/src/main/cpp/CMakeLists.txt', '**/vcpkg.json') }}-${{ hashFiles('core/src/main/cpp/**/*.h', 'core/src/main/cpp/**/*.cpp') }}
          restore-keys: |
            ${{ runner.os }}-cmake-${{ matrix.triplet }}-
            ${{ runner.os }}-cmake-

      - name: Configure CMake
        shell: bash
        run: |
          FFMPEG_INCLUDE=$GITHUB_WORKSPACE/vcpkg/installed/${{ matrix.triplet }}/include
          PORTAUDIO_INCLUDE=$GITHUB_WORKSPACE/vcpkg/installed/${{ matrix.triplet }}/include
          FFMPEG_LIB=$GITHUB_WORKSPACE/vcpkg/installed/${{ matrix.triplet }}/lib
          PORTAUDIO_LIB=$GITHUB_WORKSPACE/vcpkg/installed/${{ matrix.triplet }}/lib

          echo "FFMPEG_INCLUDE=$FFMPEG_INCLUDE" >> $GITHUB_ENV
          echo "PORTAUDIO_INCLUDE=$PORTAUDIO_INCLUDE" >> $GITHUB_ENV
          echo "FFMPEG_LIB=$FFMPEG_LIB" >> $GITHUB_ENV
          echo "PORTAUDIO_LIB=$PORTAUDIO_LIB" >> $GITHUB_ENV
    
          echo "Checking FFmpeg headers at: $FFMPEG_INCLUDE"
          ls -la $FFMPEG_INCLUDE/libavcodec || true

          if [[ "${{ steps.cmake-cache.outputs.cache-hit }}" != 'true' ]]; then
            cmake -S core/src/main/cpp -B build \
              -DCMAKE_TOOLCHAIN_FILE=$GITHUB_WORKSPACE/vcpkg/scripts/buildsystems/vcpkg.cmake \
              -DVCPKG_TARGET_TRIPLET=${{ matrix.triplet }} \
              -DCMAKE_BUILD_TYPE=Release \
              -DFFMPEG_INCLUDE="$FFMPEG_INCLUDE" \
              -DPORTAUDIO_INCLUDE="$PORTAUDIO_INCLUDE" \
              -DFFMPEG_LIB="$FFMPEG_LIB" \
              -DPORTAUDIO_LIB="$PORTAUDIO_LIB"
          fi

      - name: Build native library
        shell: bash
        run: cmake --build build --config Release

      - name: Prepare resources
        shell: bash
        run: |
          rm -rf core/src/main/resources/bin
          mkdir -p core/src/main/resources/bin
          cp build/*klarity${{ matrix.binary_ext }} core/src/main/resources/bin/ || true
          for lib in avutil swresample swscale avcodec avformat avfilter avdevice portaudio; do
            cp $GITHUB_WORKSPACE/vcpkg/installed/${{ matrix.triplet }}/bin/*${lib}*${{ matrix.binary_ext }} core/src/main/resources/bin/ || true
          done

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17

      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Build JARs
        run: |
          ./gradlew :core:shadowJar
          ./gradlew :compose:shadowJar
          ./gradlew :example:shadowJar

      - name: Clean up resources
        run: |
          rm -rf core/src/main/resources/bin

      - name: Copy JARs
        run: |
          mkdir -p artifacts/${{ matrix.os }}
          cp core/build/libs/*.jar artifacts/${{ matrix.os }}/core.jar
          cp compose/build/libs/*.jar artifacts/${{ matrix.os }}/compose.jar
          cp example/build/libs/*.jar artifacts/${{ matrix.os }}/example.jar

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: klarity-${{ matrix.os }}
          path: artifacts/${{ matrix.os }}